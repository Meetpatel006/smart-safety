name: Build and Release Android

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  prepare:
    name: Prepare - derive version
    runs-on: ubuntu-latest
    outputs:
      tag: '${{ steps.version.outputs.tag }}'
      version: '${{ steps.version.outputs.version }}'
      artifact_suffix: '${{ steps.version.outputs.artifact_suffix }}'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Derive version from tag
        id: version
        run: |
          TAG_NAME="${GITHUB_REF##*/}"
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${TAG_NAME#v}"
            echo "tag=${TAG_NAME}" >> $GITHUB_OUTPUT
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "artifact_suffix=${VERSION}" >> $GITHUB_OUTPUT
          else
            VERSION="$(node -e 'const fs=require("fs"); try{ if(fs.existsSync("app.json")){const j=JSON.parse(fs.readFileSync("app.json")); const v=(j.expo&&j.expo.version)||j.version||""; console.log(v);} else if(fs.existsSync("package.json")){console.log(JSON.parse(fs.readFileSync("package.json")).version||"");} else console.log(""); }catch(e){console.log(""); }')"
            if [ -z "$VERSION" ] || [ "$VERSION" = "" ]; then
              VERSION="dev-$(date +%Y%m%d-%H%M%S)"
            fi
            echo "tag=" >> $GITHUB_OUTPUT
            echo "version=${VERSION}" >> $GITHUB_OUTPUT
            echo "artifact_suffix=${VERSION}" >> $GITHUB_OUTPUT
          fi
          
          echo "Final version: ${VERSION}"
          echo "Final artifact suffix: ${VERSION}"

  android-build:
    name: Android Build
    runs-on: ubuntu-latest
    needs: prepare
    timeout-minutes: 40
    env:
      JAVA_VERSION: '17'
      NODE_VERSION: '18'
      GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx3g -XX:MaxMetaspaceSize=1g -XX:+HeapDumpOnOutOfMemoryError"
      MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}
      MAPBOX_ACCESS_TOKEN: ${{ secrets.MAPBOX_ACCESS_TOKEN }}
      GEMINI_API_URL: ${{ secrets.GEMINI_API_URL }}
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GEMINI_MODEL: ${{ secrets.GEMINI_MODEL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install Node dependencies
        run: npm ci --legacy-peer-deps || npm install --legacy-peer-deps

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
          cache: gradle

      - name: Configure Mapbox for Gradle
        run: |
          mkdir -p ~/.gradle
          echo "MAPBOX_DOWNLOADS_TOKEN=${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}" >> ~/.gradle/gradle.properties

      - name: Expo prebuild
        run: npx expo prebuild --non-interactive

      - name: Make Gradle executable
        run: chmod +x android/gradlew

      - name: Configure Android build properties
        run: |
          echo "MAPBOX_DOWNLOADS_TOKEN=${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}" >> android/gradle.properties
          echo "android.useAndroidX=true" >> android/gradle.properties
          echo "android.enableJetifier=true" >> android/gradle.properties
          echo "MAPBOX_ACCESS_TOKEN=${{ secrets.MAPBOX_ACCESS_TOKEN }}" >> android/gradle.properties
          echo "GEMINI_API_URL=${{ secrets.GEMINI_API_URL }}" >> android/gradle.properties
          echo "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}" >> android/gradle.properties
          echo "GEMINI_MODEL=${{ secrets.GEMINI_MODEL }}" >> android/gradle.properties

      - name: Build Release APK
        working-directory: android
        env:
          MAPBOX_DOWNLOADS_TOKEN: ${{ secrets.MAPBOX_DOWNLOADS_TOKEN }}
          MAPBOX_ACCESS_TOKEN: ${{ secrets.MAPBOX_ACCESS_TOKEN }}
          GEMINI_API_URL: ${{ secrets.GEMINI_API_URL }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GEMINI_MODEL: ${{ secrets.GEMINI_MODEL }}
        run: |
          ./gradlew clean
          ./gradlew assembleRelease --no-daemon --stacktrace --info

      - name: List outputs
        run: |
          ls -R android/app/build/outputs

      - name: Verify APK files exist
        run: |
          if [ ! -d "android/app/build/outputs/apk/release" ] || [ -z "$(ls -A android/app/build/outputs/apk/release/*.apk 2>/dev/null)" ]; then
            echo "Error: No APK files found in android/app/build/outputs/apk/release/"
            exit 1
          fi
          echo "APK files found:"
          ls -la android/app/build/outputs/apk/release/*.apk

      - name: Upload build artifacts (versioned)
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts-${{ needs.prepare.outputs.artifact_suffix }}
          path: android/app/build/outputs/apk/release/*.apk
          if-no-files-found: error

      - name: Upload build artifacts (unversioned fallback)
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts
          path: android/app/build/outputs/apk/release/*.apk
          if-no-files-found: error

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [rename-and-upload, prepare]
    if: needs.prepare.outputs.tag != ''
    steps:
      - name: Show resolved version and artifact name
        run: |
          echo "Version: '${{ needs.prepare.outputs.version }}'"
          echo "Tag: '${{ needs.prepare.outputs.tag }}'"
          echo "Artifact suffix: '${{ needs.prepare.outputs.artifact_suffix }}'"
          echo "Downloading renamed artifacts: android-artifacts-renamed-${{ needs.prepare.outputs.artifact_suffix }}"

      - name: Download renamed artifacts
        uses: actions/download-artifact@v4
        with:
          name: android-artifacts-renamed-${{ needs.prepare.outputs.artifact_suffix }}
          path: downloaded

      - name: Verify downloaded files
        run: |
          echo "Downloaded renamed files:"
          ls -la downloaded/
          if [ -z "$(ls -A downloaded/ 2>/dev/null)" ]; then
            echo "Error: No files downloaded"
            exit 1
          fi

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare.outputs.tag }}
          name: Release ${{ needs.prepare.outputs.version }}
          draft: false
          prerelease: false
          files: downloaded/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  rename-and-upload:
    name: Rename APK by version and upload
    runs-on: ubuntu-latest
    needs: [android-build, prepare]
    steps:
      - name: Show resolved version and artifact name
        run: |
          echo "Version: '${{ needs.prepare.outputs.version }}'"
          echo "Artifact suffix: '${{ needs.prepare.outputs.artifact_suffix }}'"
          echo "Downloading artifact: android-artifacts-${{ needs.prepare.outputs.artifact_suffix }}"

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: android-artifacts-${{ needs.prepare.outputs.artifact_suffix }}
          path: downloaded

      - name: Show downloaded files
        run: |
          echo "Downloaded files:"
          ls -la downloaded/

      - name: Rename APK(s) to include version
        run: |
          APP_NAME="SmartSafety"
          VERSION="${{ needs.prepare.outputs.version }}"
          mkdir -p renamed
          
          if [ -z "$(ls -A downloaded/ 2>/dev/null)" ]; then
            echo "Error: No files to rename"
            exit 1
          fi
          
          for apk in downloaded/*.apk; do
            if [ -f "$apk" ]; then
              base=$(basename "$apk")
              # Extract build type from original filename (e.g., app-release.apk -> release)
              if [[ "$base" =~ app-([^.]+)\.apk$ ]]; then
                build_type="${BASH_REMATCH[1]}"
                new_name="${APP_NAME}-${VERSION}-${build_type}.apk"
              else
                # Fallback for unexpected naming patterns
                new_name="${APP_NAME}-${VERSION}-${base}"
              fi
              echo "Renaming: $apk -> renamed/$new_name"
              mv "$apk" "renamed/$new_name"
            fi
          done
          
          echo "Renamed files:"
          ls -la renamed/

      - name: Upload renamed artifacts (versioned)
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts-renamed-${{ needs.prepare.outputs.artifact_suffix }}
          path: renamed/*.apk
          if-no-files-found: error

      - name: Upload renamed artifacts (unversioned fallback)
        uses: actions/upload-artifact@v4
        with:
          name: android-artifacts-renamed
          path: renamed/*.apk
          if-no-files-found: error